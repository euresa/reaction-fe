{"ast":null,"code":"var _jsxFileName = \"/Users/sameure/Desktop/Private/PostEra/webdev_interview_challenge-backend_challenge/frontend/src/components/RouteD3Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Tree from 'react-d3-tree';\nimport { useStyles } from \"./Main\";\nimport { MoleculeNode, svgSize } from \"./MoleculeNode\";\nimport { ReactionNode } from \"./ReactionNode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst renderRectSvgNode = ({\n  nodeDatum,\n  toggleNode\n}) => nodeDatum.attributes.is_reaction ? /*#__PURE__*/_jsxDEV(ReactionNode, {\n  nodeDatum: nodeDatum\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 10,\n  columnNumber: 9\n}, this) : /*#__PURE__*/_jsxDEV(MoleculeNode, {\n  nodeDatum: nodeDatum\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 8\n}, this);\n\nexport const RouteD3Tree = ({\n  route\n}) => {\n  _s();\n\n  const styles = useStyles();\n  const [rootData, setRootData] = useState(null);\n  const [translate, setTranslate] = useState({\n    x: svgSize.x * 2,\n    y: svgSize.y / 2\n  });\n  const treeContainerRef = useRef();\n  useEffect(() => {\n    if (route) {\n      const fetchRootData = async () => {\n        const response = await fetch(`http://localhost:8000/routes/${route.id}`);\n        const data = await response.json();\n        setRootData(data);\n      };\n\n      fetchRootData();\n    }\n  }, [route]);\n  useEffect(() => {\n    if (treeContainerRef.current) {\n      const dimensions = treeContainerRef.current.getBoundingClientRect();\n      setTranslate({\n        x: dimensions.width * 0.5,\n        y: dimensions.height * 0.05\n      });\n    }\n  }, [treeContainerRef.current]);\n  return rootData ? /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"treeWrapper\",\n    className: styles.noSpace,\n    ref: treeContainerRef,\n    children: /*#__PURE__*/_jsxDEV(Tree, {\n      id: route.id,\n      data: rootData,\n      nodeSize: svgSize,\n      translate: translate,\n      orientation: \"verticle\",\n      renderCustomNodeElement: renderRectSvgNode,\n      dimentions: {\n        width: svgSize.x,\n        height: svgSize.y\n      },\n      separation: {\n        siblings: 2,\n        nonSiblings: 2\n      },\n      depthFactor: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 13\n  }, this) : null;\n};\n\n_s(RouteD3Tree, \"p9xPFvhGN4xxwumFVKu0U0gUtRY=\", false, function () {\n  return [useStyles];\n});\n\n_c = RouteD3Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"RouteD3Tree\");","map":{"version":3,"sources":["/Users/sameure/Desktop/Private/PostEra/webdev_interview_challenge-backend_challenge/frontend/src/components/RouteD3Tree.js"],"names":["React","useEffect","useState","useRef","Tree","useStyles","MoleculeNode","svgSize","ReactionNode","renderRectSvgNode","nodeDatum","toggleNode","attributes","is_reaction","RouteD3Tree","route","styles","rootData","setRootData","translate","setTranslate","x","y","treeContainerRef","fetchRootData","response","fetch","id","data","json","current","dimensions","getBoundingClientRect","width","height","noSpace","siblings","nonSiblings"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useRef} from \"react\";\nimport Tree from 'react-d3-tree';\nimport {useStyles} from \"./Main\";\nimport {MoleculeNode, svgSize} from \"./MoleculeNode\";\nimport {ReactionNode} from \"./ReactionNode\";\n\n\nconst renderRectSvgNode = ({ nodeDatum, toggleNode }) => (\n    nodeDatum.attributes.is_reaction ? (\n        <ReactionNode nodeDatum={nodeDatum}/>\n    ): <MoleculeNode nodeDatum={nodeDatum} />\n);\n\n\nexport const RouteD3Tree = ({route}) => {\n    const styles = useStyles();\n\n    const [rootData, setRootData] = useState(null);\n    const [translate, setTranslate] = useState({ x: svgSize.x*2, y: svgSize.y/2});\n\n    const treeContainerRef = useRef();\n\n    useEffect(() => {\n        if (route) {\n            const fetchRootData = async () => {\n                const response = await fetch(`http://localhost:8000/routes/${route.id}`);\n                const data = await response.json();\n                setRootData(data);\n            };\n            fetchRootData();\n        }\n    }, [route]);\n\n    useEffect(()=>{\n        if (treeContainerRef.current){\n            const dimensions = treeContainerRef.current.getBoundingClientRect();\n            setTranslate({\n                x: dimensions.width * 0.5,\n                y: dimensions.height * 0.05,\n            });\n        }\n    }, [treeContainerRef.current]);\n\n    return (\n        rootData ? (\n            <div\n                id=\"treeWrapper\"\n                className={styles.noSpace}\n                ref={treeContainerRef}\n            >\n                <Tree\n                    id={route.id}\n                    data={rootData}\n                    nodeSize={svgSize}\n                    translate={translate}\n                    orientation=\"verticle\"\n                    renderCustomNodeElement={renderRectSvgNode}\n                    dimentions={{width: svgSize.x, height: svgSize.y}}\n                    separation={{ siblings: 2, nonSiblings: 2 }}\n                    depthFactor={300}\n                />\n            </div>\n        ) : null\n    );\n};\n"]},"metadata":{},"sourceType":"module"}