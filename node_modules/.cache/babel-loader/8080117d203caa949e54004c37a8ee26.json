{"ast":null,"code":"var _jsxFileName = \"/Users/sameure/Desktop/Private/PostEra/webdev_interview_challenge-backend_challenge/frontend/src/components/RouteD3Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Tree from 'react-d3-tree';\nimport { useStyles } from \"./Main\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst svgSize = {\n  x: 200,\n  y: 200\n};\n\nconst MoleculeNode = ({\n  nodeDatum\n}) =>\n/*#__PURE__*/\n\n/* Display HTML within the node by leveraging the foreignObject tag.\nSee this example for details: https://codesandbox.io/s/rd3t-v2-custom-with-foreignobject-0mfj8?file=/src/App.js\n*/\n_jsxDEV(\"foreignObject\", {\n  width: svgSize.x,\n  height: svgSize.y,\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    children: nodeDatum.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: nodeDatum.attributes.svg\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 10,\n  columnNumber: 5\n}, this);\n\n_c = MoleculeNode;\n\nconst ReactionNode = ({\n  nodeDatum\n}) => /*#__PURE__*/_jsxDEV(\"g\", {\n  children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n    width: \"20\",\n    height: \"20\",\n    x: \"-10\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n    fill: \"black\",\n    strokeWidth: \"1\",\n    x: \"20\",\n    children: nodeDatum.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 17,\n  columnNumber: 5\n}, this);\n\n_c2 = ReactionNode;\nexport const RouteD3Tree = ({\n  route\n}) => {\n  _s();\n\n  const styles = useStyles();\n  const [rootData, setRootData] = useState(null);\n  const [translate, setTranslate] = useState({\n    x: svgSize.x / 2,\n    y: svgSize.y / 8\n  });\n  const treeContainerRef = useRef();\n  useEffect(() => {\n    if (route) {\n      const fetchRootData = async () => {\n        const response = await fetch(`http://localhost:8000/routes/${route.id}`);\n        const data = await response.json();\n        setRootData(data);\n      };\n\n      fetchRootData();\n    }\n  }, [route]);\n  useEffect(() => {\n    if (treeContainerRef.current) {\n      const dimensions = treeContainerRef.current.getBoundingClientRect();\n      setTranslate({\n        x: dimensions.width * 0.15,\n        y: dimensions.height * 0.05\n      });\n    }\n  }, [treeContainerRef.current]);\n\n  const renderRectSvgNode = ({\n    nodeDatum,\n    toggleNode\n  }) => nodeDatum.attributes.is_reaction ? /*#__PURE__*/_jsxDEV(ReactionNode, {\n    nodeDatum: nodeDatum\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(MoleculeNode, {\n    nodeDatum: nodeDatum\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 12\n  }, this);\n\n  function stepPath(source, destination) {\n    const midX = (source.x + destination.x) / 2;\n    return `M ${source.x} ${source.y}\n          L ${midX} ${source.y}\n          L ${midX} ${destination.y}\n          L ${destination.x} ${destination.y}`;\n  }\n\n  return rootData ? /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"treeWrapper\",\n    className: styles.noSpace,\n    ref: treeContainerRef,\n    children: /*#__PURE__*/_jsxDEV(Tree, {\n      id: route.id,\n      data: rootData,\n      nodeSize: {\n        x: 200,\n        y: 200\n      },\n      translate: translate,\n      orientation: \"verticle\",\n      renderCustomNodeElement: renderRectSvgNode,\n      dimentions: {\n        height: \"200px\",\n        width: \"200px\"\n      },\n      pathFunc: stepPath\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 13\n  }, this) : null;\n};\n\n_s(RouteD3Tree, \"FMRehTlqGCHBAjvPKauYAkN6TqA=\", false, function () {\n  return [useStyles];\n});\n\n_c3 = RouteD3Tree;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"MoleculeNode\");\n$RefreshReg$(_c2, \"ReactionNode\");\n$RefreshReg$(_c3, \"RouteD3Tree\");","map":{"version":3,"sources":["/Users/sameure/Desktop/Private/PostEra/webdev_interview_challenge-backend_challenge/frontend/src/components/RouteD3Tree.js"],"names":["React","useEffect","useState","useRef","Tree","useStyles","svgSize","x","y","MoleculeNode","nodeDatum","name","__html","attributes","svg","ReactionNode","RouteD3Tree","route","styles","rootData","setRootData","translate","setTranslate","treeContainerRef","fetchRootData","response","fetch","id","data","json","current","dimensions","getBoundingClientRect","width","height","renderRectSvgNode","toggleNode","is_reaction","stepPath","source","destination","midX","noSpace"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useRef} from \"react\";\nimport Tree from 'react-d3-tree';\nimport {useStyles} from \"./Main\";\n\nconst svgSize = {x: 200, y: 200}\nconst MoleculeNode = ({nodeDatum}) => (\n    /* Display HTML within the node by leveraging the foreignObject tag.\n    See this example for details: https://codesandbox.io/s/rd3t-v2-custom-with-foreignobject-0mfj8?file=/src/App.js\n    */\n    <foreignObject width={svgSize.x} height={svgSize.y}>\n        <div>{nodeDatum.name}</div>\n        <div dangerouslySetInnerHTML={{ __html: nodeDatum.attributes.svg }} />\n    </foreignObject>\n);\n\nconst ReactionNode = ({nodeDatum}) => (\n    <g>\n        <rect width=\"20\" height=\"20\" x=\"-10\" />\n        <text fill=\"black\" strokeWidth=\"1\" x=\"20\">\n            {nodeDatum.name}\n        </text>\n    </g>\n);\n\n\nexport const RouteD3Tree = ({route}) => {\n    const styles = useStyles();\n\n    const [rootData, setRootData] = useState(null);\n    const [translate, setTranslate] = useState({ x: svgSize.x/2, y: svgSize.y/8});\n\n    const treeContainerRef = useRef();\n\n    useEffect(() => {\n        if (route) {\n            const fetchRootData = async () => {\n                const response = await fetch(`http://localhost:8000/routes/${route.id}`);\n                const data = await response.json();\n                setRootData(data);\n            };\n            fetchRootData();\n        }\n    }, [route]);\n\n    useEffect(()=>{\n        if (treeContainerRef.current){\n            const dimensions = treeContainerRef.current.getBoundingClientRect();\n            setTranslate({\n                x: dimensions.width * 0.15,\n                y: dimensions.height * 0.05,\n            });\n        }\n    }, [treeContainerRef.current]);\n\n    const renderRectSvgNode = ({ nodeDatum, toggleNode }) => (\n        nodeDatum.attributes.is_reaction ? (\n        <ReactionNode nodeDatum={nodeDatum}/>\n        ): <MoleculeNode nodeDatum={nodeDatum} />\n    );\n    function stepPath(source, destination) {\n        const midX = (source.x + destination.x) / 2;\n        return `M ${source.x} ${source.y}\n          L ${midX} ${source.y}\n          L ${midX} ${destination.y}\n          L ${destination.x} ${destination.y}`;\n    }\n\n    return (\n        rootData ? (\n            <div\n                id=\"treeWrapper\"\n                className={styles.noSpace}\n                ref={treeContainerRef}\n            >\n                <Tree\n                    id={route.id}\n                    data={rootData}\n                    nodeSize={{x: 200, y: 200 }}\n                    translate={translate}\n                    orientation=\"verticle\"\n                    renderCustomNodeElement={renderRectSvgNode}\n                    dimentions={{height: \"200px\", width: \"200px\"}}\n                    pathFunc={stepPath}\n                />\n            </div>\n        ) : null\n    );\n};\n"]},"metadata":{},"sourceType":"module"}