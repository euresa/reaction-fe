{"ast":null,"code":"var _jsxFileName = \"/Users/sameure/Desktop/Private/PostEra/webdev_interview_challenge-backend_challenge/frontend/src/components/RouteD3Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Tree from 'react-d3-tree';\nimport { useStyles } from \"./Main\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst svgSize = {\n  x: 200,\n  y: 200\n};\n\nconst MoleculeNode = ({\n  nodeDatum\n}) =>\n/*#__PURE__*/\n\n/* Display HTML within the node by leveraging the foreignObject tag.\nSee this example for details: https://codesandbox.io/s/rd3t-v2-custom-with-foreignobject-0mfj8?file=/src/App.js\n*/\n_jsxDEV(\"g\", {\n  children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n    r: 15\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n    width: svgSize.x,\n    height: svgSize.y,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: \"1px solid black\",\n        backgroundColor: \"#dedede\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: nodeDatum.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: nodeDatum.attributes.svg\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 10,\n  columnNumber: 5\n}, this);\n\n_c = MoleculeNode;\n\nconst ReactionNode = ({\n  nodeDatum\n}) => /*#__PURE__*/_jsxDEV(\"g\", {\n  children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n    width: \"20\",\n    height: \"20\",\n    x: \"-10\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n    fill: \"black\",\n    strokeWidth: \"1\",\n    x: \"20\",\n    children: nodeDatum.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 23,\n  columnNumber: 5\n}, this);\n\n_c2 = ReactionNode;\nexport const RouteD3Tree = ({\n  route\n}) => {\n  _s();\n\n  const styles = useStyles();\n  const [rootData, setRootData] = useState(null);\n  const [translate, setTranslate] = useState({\n    x: svgSize.x / 2,\n    y: svgSize.y / 8\n  });\n  const treeContainerRef = useRef();\n  useEffect(() => {\n    if (route) {\n      const fetchRootData = async () => {\n        const response = await fetch(`http://localhost:8000/routes/${route.id}`);\n        const data = await response.json();\n        setRootData(data);\n      };\n\n      fetchRootData();\n    }\n  }, [route]);\n  useEffect(() => {\n    if (treeContainerRef.current) {\n      const dimensions = treeContainerRef.current.getBoundingClientRect();\n      setTranslate({\n        x: dimensions.width * 0.15,\n        y: dimensions.height * 0.05\n      });\n    }\n  }, [treeContainerRef.current]);\n\n  const renderRectSvgNode = ({\n    nodeDatum,\n    toggleNode\n  }) => nodeDatum.attributes.is_reaction ? /*#__PURE__*/_jsxDEV(ReactionNode, {\n    nodeDatum: nodeDatum\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(MoleculeNode, {\n    nodeDatum: nodeDatum\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 12\n  }, this);\n\n  return rootData ? /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"treeWrapper\",\n    className: styles.noSpace,\n    ref: treeContainerRef,\n    children: /*#__PURE__*/_jsxDEV(Tree, {\n      id: route.id,\n      data: rootData,\n      nodeSize: svgSize,\n      translate: translate,\n      orientation: \"verticle\",\n      renderCustomNodeElement: renderRectSvgNode,\n      dimentions: {\n        width: svgSize.x,\n        height: svgSize.y\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 13\n  }, this) : null;\n};\n\n_s(RouteD3Tree, \"FMRehTlqGCHBAjvPKauYAkN6TqA=\", false, function () {\n  return [useStyles];\n});\n\n_c3 = RouteD3Tree;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"MoleculeNode\");\n$RefreshReg$(_c2, \"ReactionNode\");\n$RefreshReg$(_c3, \"RouteD3Tree\");","map":{"version":3,"sources":["/Users/sameure/Desktop/Private/PostEra/webdev_interview_challenge-backend_challenge/frontend/src/components/RouteD3Tree.js"],"names":["React","useEffect","useState","useRef","Tree","useStyles","svgSize","x","y","MoleculeNode","nodeDatum","border","backgroundColor","textAlign","name","__html","attributes","svg","ReactionNode","RouteD3Tree","route","styles","rootData","setRootData","translate","setTranslate","treeContainerRef","fetchRootData","response","fetch","id","data","json","current","dimensions","getBoundingClientRect","width","height","renderRectSvgNode","toggleNode","is_reaction","noSpace"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useRef} from \"react\";\nimport Tree from 'react-d3-tree';\nimport {useStyles} from \"./Main\";\n\nconst svgSize = {x: 200, y: 200}\nconst MoleculeNode = ({nodeDatum}) => (\n    /* Display HTML within the node by leveraging the foreignObject tag.\n    See this example for details: https://codesandbox.io/s/rd3t-v2-custom-with-foreignobject-0mfj8?file=/src/App.js\n    */\n    <g>\n        <circle r={15}></circle>\n        {/* `foreignObject` requires width & height to be explicitly set. */}\n        <foreignObject width={svgSize.x} height={svgSize.y}>\n            <div style={{ border: \"1px solid black\", backgroundColor: \"#dedede\" }}>\n                <div style={{ textAlign: \"center\" }}>{nodeDatum.name}</div>\n                <div dangerouslySetInnerHTML={{ __html: nodeDatum.attributes.svg }} />\n            </div>\n        </foreignObject>\n    </g>\n);\n\nconst ReactionNode = ({nodeDatum}) => (\n    <g>\n        <rect width=\"20\" height=\"20\" x=\"-10\" />\n        <text fill=\"black\" strokeWidth=\"1\" x=\"20\">\n            {nodeDatum.name}\n        </text>\n    </g>\n);\n\n\nexport const RouteD3Tree = ({route}) => {\n    const styles = useStyles();\n\n    const [rootData, setRootData] = useState(null);\n    const [translate, setTranslate] = useState({ x: svgSize.x/2, y: svgSize.y/8});\n\n    const treeContainerRef = useRef();\n\n    useEffect(() => {\n        if (route) {\n            const fetchRootData = async () => {\n                const response = await fetch(`http://localhost:8000/routes/${route.id}`);\n                const data = await response.json();\n                setRootData(data);\n            };\n            fetchRootData();\n        }\n    }, [route]);\n\n    useEffect(()=>{\n        if (treeContainerRef.current){\n            const dimensions = treeContainerRef.current.getBoundingClientRect();\n            setTranslate({\n                x: dimensions.width * 0.15,\n                y: dimensions.height * 0.05,\n            });\n        }\n    }, [treeContainerRef.current]);\n\n    const renderRectSvgNode = ({ nodeDatum, toggleNode }) => (\n        nodeDatum.attributes.is_reaction ? (\n        <ReactionNode nodeDatum={nodeDatum}/>\n        ): <MoleculeNode nodeDatum={nodeDatum} />\n    );\n    return (\n        rootData ? (\n            <div\n                id=\"treeWrapper\"\n                className={styles.noSpace}\n                ref={treeContainerRef}\n            >\n                <Tree\n                    id={route.id}\n                    data={rootData}\n                    nodeSize={svgSize}\n                    translate={translate}\n                    orientation=\"verticle\"\n                    renderCustomNodeElement={renderRectSvgNode}\n                    dimentions={{width: svgSize.x, height: svgSize.y}}\n                />\n            </div>\n        ) : null\n    );\n};\n"]},"metadata":{},"sourceType":"module"}