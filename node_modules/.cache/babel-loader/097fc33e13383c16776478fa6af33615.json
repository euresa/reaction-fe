{"ast":null,"code":"var _jsxFileName = \"/Users/sameure/Desktop/Private/PostEra/webdev_interview_challenge-backend_challenge/frontend/src/components/RouteD3Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Tree from 'react-d3-tree';\nimport { useStyles } from \"./Main\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MoleculeNode = ({\n  nodeDatum\n}) => /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n  width: \"175\",\n  height: \"150\",\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: nodeDatum.attributes.svg\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 5\n}, this);\n\n_c = MoleculeNode;\n\nconst ReactionNode = ({\n  nodeDatum\n}) => /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 12,\n  columnNumber: 5\n}, this) // <g>\n//     <rect width=\"20\" height=\"20\" x=\"-10\" />\n//     <text fill=\"black\" strokeWidth=\"1\" x=\"20\">\n//         {nodeDatum.name}\n//     </text>\n//     <text fill=\"black\" x=\"20\" dy=\"20\" strokeWidth=\"1\">\n//         Smart Template: {nodeDatum.attributes.smart_template}\n//     </text>\n// </g>\n;\n\n_c2 = ReactionNode;\nexport const RouteD3Tree = ({\n  route\n}) => {\n  _s();\n\n  const styles = useStyles();\n  const [rootData, setRootData] = useState(null);\n  const [translate, setTranslate] = useState({\n    x: 100,\n    y: 24\n  });\n  const treeContainerRef = useRef();\n  useEffect(() => {\n    if (route) {\n      const fetchRootData = async () => {\n        const response = await fetch(`http://localhost:8000/routes/${route.id}`);\n        const data = await response.json();\n        setRootData(data);\n      };\n\n      fetchRootData();\n    }\n  }, [route]);\n  useEffect(() => {\n    if (treeContainerRef.current) {\n      const dimensions = treeContainerRef.current.getBoundingClientRect();\n      setTranslate({\n        x: dimensions.width * 0.15,\n        y: dimensions.height * 0.05\n      });\n    }\n  }, [treeContainerRef.current]);\n\n  const renderRectSvgNode = ({\n    nodeDatum,\n    toggleNode\n  }) => nodeDatum.attributes.is_reaction ? /*#__PURE__*/_jsxDEV(ReactionNode, {\n    nodeDatum: nodeDatum\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(MoleculeNode, {\n    nodeDatum: nodeDatum\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 12\n  }, this);\n\n  return rootData ? /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"treeWrapper\",\n    className: styles.noSpace,\n    ref: treeContainerRef,\n    children: /*#__PURE__*/_jsxDEV(Tree, {\n      id: route.id,\n      data: rootData,\n      translate: translate,\n      orientation: \"vertical\",\n      renderCustomNodeElement: renderRectSvgNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 13\n  }, this) : null;\n};\n\n_s(RouteD3Tree, \"2YPlgJzeApx8BfDqpijw5b8GZ0c=\", false, function () {\n  return [useStyles];\n});\n\n_c3 = RouteD3Tree;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"MoleculeNode\");\n$RefreshReg$(_c2, \"ReactionNode\");\n$RefreshReg$(_c3, \"RouteD3Tree\");","map":{"version":3,"sources":["/Users/sameure/Desktop/Private/PostEra/webdev_interview_challenge-backend_challenge/frontend/src/components/RouteD3Tree.js"],"names":["React","useEffect","useState","useRef","Tree","useStyles","MoleculeNode","nodeDatum","__html","attributes","svg","ReactionNode","RouteD3Tree","route","styles","rootData","setRootData","translate","setTranslate","x","y","treeContainerRef","fetchRootData","response","fetch","id","data","json","current","dimensions","getBoundingClientRect","width","height","renderRectSvgNode","toggleNode","is_reaction","noSpace"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useRef} from \"react\";\nimport Tree from 'react-d3-tree';\nimport {useStyles} from \"./Main\";\n\nconst MoleculeNode = ({nodeDatum}) => (\n    <foreignObject width=\"175\" height=\"150\">\n        <div dangerouslySetInnerHTML={{ __html: nodeDatum.attributes.svg }} />\n    </foreignObject>\n);\n\nconst ReactionNode = ({nodeDatum}) => (\n    <p></p>\n    // <g>\n    //     <rect width=\"20\" height=\"20\" x=\"-10\" />\n    //     <text fill=\"black\" strokeWidth=\"1\" x=\"20\">\n    //         {nodeDatum.name}\n    //     </text>\n    //     <text fill=\"black\" x=\"20\" dy=\"20\" strokeWidth=\"1\">\n    //         Smart Template: {nodeDatum.attributes.smart_template}\n    //     </text>\n    // </g>\n);\n\n\n\nexport const RouteD3Tree = ({route}) => {\n    const styles = useStyles();\n\n    const [rootData, setRootData] = useState(null);\n    const [translate, setTranslate] = useState({ x:100, y: 24 });\n\n    const treeContainerRef = useRef();\n\n    useEffect(() => {\n        if (route) {\n            const fetchRootData = async () => {\n                const response = await fetch(`http://localhost:8000/routes/${route.id}`);\n                const data = await response.json();\n                setRootData(data);\n            };\n            fetchRootData();\n        }\n    }, [route]);\n\n    useEffect(()=>{\n        if (treeContainerRef.current){\n            const dimensions = treeContainerRef.current.getBoundingClientRect();\n            setTranslate({\n                x: dimensions.width * 0.15,\n                y: dimensions.height * 0.05,\n            });\n        }\n    }, [treeContainerRef.current]);\n\n    const renderRectSvgNode = ({ nodeDatum, toggleNode }) => (\n        nodeDatum.attributes.is_reaction ? (\n        <ReactionNode nodeDatum={nodeDatum}/>\n        ): <MoleculeNode nodeDatum={nodeDatum} />\n    );\n\n\n    return (\n        rootData ? (\n            <div\n                id=\"treeWrapper\"\n                className={styles.noSpace}\n                ref={treeContainerRef}\n            >\n                <Tree\n                    id={route.id}\n                    data={rootData}\n                    translate={translate}\n                    orientation=\"vertical\"\n                    renderCustomNodeElement={renderRectSvgNode}\n                />\n            </div>\n        ) : null\n    );\n};\n"]},"metadata":{},"sourceType":"module"}