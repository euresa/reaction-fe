{"ast":null,"code":"var _jsxFileName = \"/Users/sameure/Desktop/Private/PostEra/webdev_interview_challenge-backend_challenge/frontend/src/components/RouteD3Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Tree from 'react-d3-tree';\nimport { useStyles } from \"./Main\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReactionNode = ({\n  nodeDatum\n}) => /*#__PURE__*/_jsxDEV(\"g\", {\n  children: /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n    width: svgSize.x,\n    height: svgSize.y,\n    x: -100,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: \"1px solid black\",\n        backgroundColor: \"lightcoral\",\n        textAlign: \"center\",\n        wordWrap: \"break-word\"\n      },\n      children: [\"REACTION: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 27\n      }, this), nodeDatum.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 5\n}, this);\n\n_c = ReactionNode;\nexport const RouteD3Tree = ({\n  route\n}) => {\n  _s();\n\n  const styles = useStyles();\n  const [rootData, setRootData] = useState(null);\n  const [translate, setTranslate] = useState({\n    x: svgSize.x * 2,\n    y: svgSize.y / 2\n  });\n  const treeContainerRef = useRef();\n  useEffect(() => {\n    if (route) {\n      const fetchRootData = async () => {\n        const response = await fetch(`http://localhost:8000/routes/${route.id}`);\n        const data = await response.json();\n        setRootData(data);\n      };\n\n      fetchRootData();\n    }\n  }, [route]);\n  useEffect(() => {\n    if (treeContainerRef.current) {\n      const dimensions = treeContainerRef.current.getBoundingClientRect();\n      setTranslate({\n        x: dimensions.width * 0.5,\n        y: dimensions.height * 0.05\n      });\n    }\n  }, [treeContainerRef.current]);\n\n  const renderRectSvgNode = ({\n    nodeDatum,\n    toggleNode\n  }) => nodeDatum.attributes.is_reaction ? /*#__PURE__*/_jsxDEV(ReactionNode, {\n    nodeDatum: nodeDatum\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(MoleculeNode, {\n    nodeDatum: nodeDatum\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 12\n  }, this);\n\n  return rootData ? /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"treeWrapper\",\n    className: styles.noSpace,\n    ref: treeContainerRef,\n    children: /*#__PURE__*/_jsxDEV(Tree, {\n      id: route.id,\n      data: rootData,\n      nodeSize: svgSize,\n      translate: translate,\n      orientation: \"verticle\",\n      renderCustomNodeElement: renderRectSvgNode,\n      dimentions: {\n        width: svgSize.x,\n        height: svgSize.y\n      },\n      separation: {\n        siblings: 2,\n        nonSiblings: 2\n      },\n      depthFactor: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 13\n  }, this) : null;\n};\n\n_s(RouteD3Tree, \"p9xPFvhGN4xxwumFVKu0U0gUtRY=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = RouteD3Tree;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ReactionNode\");\n$RefreshReg$(_c2, \"RouteD3Tree\");","map":{"version":3,"sources":["/Users/sameure/Desktop/Private/PostEra/webdev_interview_challenge-backend_challenge/frontend/src/components/RouteD3Tree.js"],"names":["React","useEffect","useState","useRef","Tree","useStyles","ReactionNode","nodeDatum","svgSize","x","y","border","backgroundColor","textAlign","wordWrap","name","RouteD3Tree","route","styles","rootData","setRootData","translate","setTranslate","treeContainerRef","fetchRootData","response","fetch","id","data","json","current","dimensions","getBoundingClientRect","width","height","renderRectSvgNode","toggleNode","attributes","is_reaction","noSpace","siblings","nonSiblings"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useRef} from \"react\";\nimport Tree from 'react-d3-tree';\nimport {useStyles} from \"./Main\";\n\n\n\nconst ReactionNode = ({nodeDatum}) => (\n    <g>\n        <foreignObject width={svgSize.x} height={svgSize.y} x={-100}>\n            <div style={\n                {border: \"1px solid black\",\n                    backgroundColor: \"lightcoral\",\n                    textAlign: \"center\",\n                    wordWrap: \"break-word\"\n                }\n            }>\n                REACTION: <br></br>\n                {nodeDatum.name}\n            </div>\n        </foreignObject>\n    </g>\n);\n\n\nexport const RouteD3Tree = ({route}) => {\n    const styles = useStyles();\n\n    const [rootData, setRootData] = useState(null);\n    const [translate, setTranslate] = useState({ x: svgSize.x*2, y: svgSize.y/2});\n\n    const treeContainerRef = useRef();\n\n    useEffect(() => {\n        if (route) {\n            const fetchRootData = async () => {\n                const response = await fetch(`http://localhost:8000/routes/${route.id}`);\n                const data = await response.json();\n                setRootData(data);\n            };\n            fetchRootData();\n        }\n    }, [route]);\n\n    useEffect(()=>{\n        if (treeContainerRef.current){\n            const dimensions = treeContainerRef.current.getBoundingClientRect();\n            setTranslate({\n                x: dimensions.width * 0.5,\n                y: dimensions.height * 0.05,\n            });\n        }\n    }, [treeContainerRef.current]);\n\n    const renderRectSvgNode = ({ nodeDatum, toggleNode }) => (\n        nodeDatum.attributes.is_reaction ? (\n        <ReactionNode nodeDatum={nodeDatum}/>\n        ): <MoleculeNode nodeDatum={nodeDatum} />\n    );\n    return (\n        rootData ? (\n            <div\n                id=\"treeWrapper\"\n                className={styles.noSpace}\n                ref={treeContainerRef}\n            >\n                <Tree\n                    id={route.id}\n                    data={rootData}\n                    nodeSize={svgSize}\n                    translate={translate}\n                    orientation=\"verticle\"\n                    renderCustomNodeElement={renderRectSvgNode}\n                    dimentions={{width: svgSize.x, height: svgSize.y}}\n                    separation={{ siblings: 2, nonSiblings: 2 }}\n                    depthFactor={300}\n                />\n            </div>\n        ) : null\n    );\n};\n"]},"metadata":{},"sourceType":"module"}