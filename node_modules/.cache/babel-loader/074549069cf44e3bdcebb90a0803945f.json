{"ast":null,"code":"var _jsxFileName = \"/Users/sameure/Desktop/Private/PostEra/webdev_interview_challenge-backend_challenge/frontend/src/components/RouteD3Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Tree from 'react-d3-tree';\nimport { useStyles } from \"./Main\";\nimport { useCenteredTree } from \"../helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MoleculeNode = ({\n  nodeDatum\n}) => /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n  width: \"175\",\n  height: \"150\",\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    children: nodeDatum.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: nodeDatum.attributes.svg\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 5\n}, this);\n\n_c = MoleculeNode;\n\nconst ReactionNode = ({\n  nodeDatum\n}) => /*#__PURE__*/_jsxDEV(\"g\", {\n  children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n    width: \"20\",\n    height: \"20\",\n    x: \"-10\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n    fill: \"black\",\n    strokeWidth: \"1\",\n    x: \"20\",\n    children: nodeDatum.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 15,\n  columnNumber: 5\n}, this);\n\n_c2 = ReactionNode;\nexport const RouteD3Tree = ({\n  route\n}) => {\n  _s();\n\n  const styles = useStyles();\n  const [rootData, setRootData] = useState(null); // const [translate, setTranslate] = useState({ x:100, y: 24 });\n  // const treeContainerRef = useRef();\n\n  useEffect(() => {\n    if (route) {\n      const fetchRootData = async () => {\n        const response = await fetch(`http://localhost:8000/routes/${route.id}`);\n        const data = await response.json();\n        setRootData(data);\n      };\n\n      fetchRootData();\n    }\n  }, [route]); // useEffect(()=>{\n  //     if (treeContainerRef.current){\n  //         const dimensions = treeContainerRef.current.getBoundingClientRect();\n  //         setTranslate({\n  //             x: dimensions.width * 0.15,\n  //             y: dimensions.height * 0.05,\n  //         });\n  //     }\n  // }, [treeContainerRef.current]);\n\n  const renderRectSvgNode = ({\n    nodeDatum,\n    toggleNode\n  }) => nodeDatum.attributes.is_reaction ? /*#__PURE__*/_jsxDEV(ReactionNode, {\n    nodeDatum: nodeDatum\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(MoleculeNode, {\n    nodeDatum: nodeDatum\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 12\n  }, this);\n\n  const [dimensions, translate, containerRef] = useCenteredTree();\n  return rootData ? /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"treeWrapper\",\n    className: styles.fullSize,\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(Tree, {\n      id: route.id,\n      data: rootData,\n      dimensions: dimensions,\n      translate: translate,\n      orientation: \"vertical\",\n      renderCustomNodeElement: renderRectSvgNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 13\n  }, this) : null;\n};\n\n_s(RouteD3Tree, \"boHXeaC5dAo1UmFHSIEdhJGg1kc=\", false, function () {\n  return [useStyles, useCenteredTree];\n});\n\n_c3 = RouteD3Tree;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"MoleculeNode\");\n$RefreshReg$(_c2, \"ReactionNode\");\n$RefreshReg$(_c3, \"RouteD3Tree\");","map":{"version":3,"sources":["/Users/sameure/Desktop/Private/PostEra/webdev_interview_challenge-backend_challenge/frontend/src/components/RouteD3Tree.js"],"names":["React","useEffect","useState","useRef","Tree","useStyles","useCenteredTree","MoleculeNode","nodeDatum","name","__html","attributes","svg","ReactionNode","RouteD3Tree","route","styles","rootData","setRootData","fetchRootData","response","fetch","id","data","json","renderRectSvgNode","toggleNode","is_reaction","dimensions","translate","containerRef","fullSize"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useRef} from \"react\";\nimport Tree from 'react-d3-tree';\nimport {useStyles} from \"./Main\";\nimport {useCenteredTree} from \"../helpers\";\n\nconst MoleculeNode = ({nodeDatum}) => (\n\n    <foreignObject width=\"175\" height=\"150\">\n        <div>{nodeDatum.name}</div>\n        <div dangerouslySetInnerHTML={{ __html: nodeDatum.attributes.svg }} />\n    </foreignObject>\n);\n\nconst ReactionNode = ({nodeDatum}) => (\n    <g>\n        <rect width=\"20\" height=\"20\" x=\"-10\" />\n        <text fill=\"black\" strokeWidth=\"1\" x=\"20\">\n            {nodeDatum.name}\n        </text>\n    </g>\n);\n\n\n\nexport const RouteD3Tree = ({route}) => {\n    const styles = useStyles();\n\n    const [rootData, setRootData] = useState(null);\n    // const [translate, setTranslate] = useState({ x:100, y: 24 });\n\n    // const treeContainerRef = useRef();\n\n    useEffect(() => {\n        if (route) {\n            const fetchRootData = async () => {\n                const response = await fetch(`http://localhost:8000/routes/${route.id}`);\n                const data = await response.json();\n                setRootData(data);\n            };\n            fetchRootData();\n        }\n    }, [route]);\n\n    // useEffect(()=>{\n    //     if (treeContainerRef.current){\n    //         const dimensions = treeContainerRef.current.getBoundingClientRect();\n    //         setTranslate({\n    //             x: dimensions.width * 0.15,\n    //             y: dimensions.height * 0.05,\n    //         });\n    //     }\n    // }, [treeContainerRef.current]);\n\n    const renderRectSvgNode = ({ nodeDatum, toggleNode }) => (\n        nodeDatum.attributes.is_reaction ? (\n        <ReactionNode nodeDatum={nodeDatum}/>\n        ): <MoleculeNode nodeDatum={nodeDatum} />\n    );\n\n    const [dimensions, translate, containerRef] = useCenteredTree();\n\n    return (\n        rootData ? (\n            <div\n                id=\"treeWrapper\"\n                className={styles.fullSize}\n                ref={containerRef}\n            >\n                <Tree\n                    id={route.id}\n                    data={rootData}\n                    dimensions={dimensions}\n                    translate={translate}\n                    orientation=\"vertical\"\n                    renderCustomNodeElement={renderRectSvgNode}\n                />\n            </div>\n        ) : null\n    );\n};\n"]},"metadata":{},"sourceType":"module"}